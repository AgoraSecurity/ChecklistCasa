TODO:
Remove "improved loggin" since it only affects observability

2. Change email to use:
MAILGUN_API_KEY=
MAILGUN_DOMAIN=
EMAIL_FROM

Example code:
...
    html_content = EmailReportService._generate_html_content(projects_data)
    
    # Send email via Mailgun
    result = EmailReportService._send_email(
        subject=f"Weekly North Star Report - {datetime.now().strftime('%B %d, %Y')}",
        html_content=html_content,
        projects_data=projects_data
    )
....
    @staticmethod
    def _send_email(subject: str, html_content: str, projects_data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Send email via Mailgun API.
        
        Args:
            subject: Email subject
            html_content: HTML email content
            projects_data: Project data for attachments
            
        Returns:
            Dictionary with send status
        """
        try:
            # Prepare Mailgun API request
            url = f"https://api.mailgun.net/v3/{settings.MAILGUN_DOMAIN}/messages"
            
            auth = ('api', settings.MAILGUN_API_KEY)
            
            data = {
                'from': settings.REPORT_EMAIL_FROM,
                'to': settings.REPORT_EMAIL_RECIPIENT,
                'subject': subject,
                'html': html_content
            }
            
            # Send the email
            response = requests.post(url, auth=auth, data=data, timeout=30)
            
            if response.status_code == 200:
                logger.info(f"Email sent successfully via Mailgun: {response.json()}")
                return {
                    'status': 'success',
                    'message': 'Weekly report sent successfully',
                    'mailgun_response': response.json()
                }
            else:
                logger.error(f"Mailgun API error: {response.status_code} - {response.text}")
                return {
                    'status': 'error',
                    'message': f'Mailgun API error: {response.status_code}',
                    'details': response.text
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Network error sending email: {str(e)}")
            return {
                'status': 'error',
                'message': f'Network error: {str(e)}'
            }
        except Exception as e:
            logger.error(f"Unexpected error sending email: {str(e)}")
            return {
                'status': 'error',
                'message': f'Unexpected error: {str(e)}'
            }